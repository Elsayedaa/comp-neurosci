
* Introduction
** course overview
*** what is computation?
**** very general: transforming inputs to outputs
**** examples:
***** computing mathematical expressions
***** detecting threshold crossings
***** generating patterns
*** Marr's hierarchy
**** computation: the specification of the problem
**** algorithm: the problem-solving approach to the computation
**** implementation: the instantiation of the algorithm
*** Using digital computers to understand computation
**** the brain is not a digital computer
***** no clear separation of data and code
***** distributed rather than modularized
***** much more efficient in power consumption
***** better at "fuzzy" tasks
** Using computational models
*** Box's dictum
**** Explanatory vs predictive power
**** Realism vs efficiency
*** Generative models (simulations)
**** Incorporate knowledge into a complete formal system
**** Study how manipulating parameters affects the behavior of the system
**** "Proof of principle" that a particular implementation can perform a computation
**** Noise is often an afterthought
*** Statistical models
**** Formally describes the distribution of outcomes (measurements)
**** Used to estimate parameters of the model from observations
**** Assumptions about noise are explicit
** help students install Python environment
* Sensory computations
** basic neurobiology (if needed)
*** neuron anatomy and physiology
*** sensory and motor systems
*** learning and memory
** integration and filtering
*** paper discussion: Ewert (1974)
*** computations: detection and localization
*** algorithms: receptive fields; selective, hierarchical integration; thresholds; mutual suppression
** pattern separation and completion
*** paper discussion: McNaughton and Norris (1987)
*** activity: pen-and-paper networks
*** Hebb's rule and heteroassociative networks (pattern separation)
*** Cell assemblies and autoassociative networks (pattern completion)
*** Reverberation and recurrent AA networks
*** the problem of saturation and possible solutions
**** sparse coding
**** consolidation
**** decay
*** possible implementations in the hippocampus
**** heterassociative (DG) and recurrent (CA3) networks for separation and completion
**** long-term potentiation and depression

* Time-varying data
** concepts:
*** time series: continuous vs sampled, sampling rate (Nyquist theorem) and bit depth
*** point process: marked vs unmarked
** experimental:
*** electrophysiology (intracellular, single unit, EEG)
*** optical (calcium-dependent fluorescence)
*** behavioral (acoustic, events)
** data types in digital computers:
*** binary data and logic
*** atomic data types (integers, floats, characters)
*** composite data types (strings, arrays, dictionaries)
** exercise
*** introduction to the ipython notebook

    Students do not need to write code at this point, but they will become
    familiar with moving through a notebook. In particular, it's important to
    convey that everything takes place in a single environment and that
    executing code in a cell alters the environment. Show how to restart the
    kernel when things get messed up, how to create new cells for exploration.

*** introduction to scalar numerical types (integers and floats)

    This can be cribbed from software carpentry or elsewhere. Basic goals are to
    teach students how to assign values to variables, to inspect the types of
    variables, and to do math with basic expressions.

*** introduction to numpy arrays: types, indexing, and slicing

    This can also be cribbed from somewhere.

*** scaffolded data exploration

    Inspect 1D plots of time series - acoustic waveforms, extracellular
    recordings, intracellular recordings. Have students use the zoom and pan
    features in the notebook to zoom in on specific regions of the time series,
    then have them write simple expressions to extract specific samples or short
    segments.

    Explore Nyquist theorem and bit depth with a widget that adjusts the
    sampling rate of a short time series.

    Inspect raster plots of point process data.



* Best practices in software and open science
** principles of open science
*** open formats
*** open source code
*** reproducible workflows (dependency management and version control)
*** test-driven development
** introduction to algorithms in Python
*** variables, functions, conditional control, loops
*** modules, packages, and environments

* Working with (big) data
** observation as a semi-random process
*** distributions
** reading and writing data from disk and the Internet
*** data structures in Python
*** external libraries and dependency management
** data sets for student practice:
*** single-unit responses to auditory stimuli (starling dataset)
*** single-unit responses during behavior (from CRCNS; pfc or hippocampus)
*** calcium imaging set (from CRCNS; e.g. pvc-7)
*** EEG data during a basic sensory task (e.g. MMN?)
*** multiple single units
*** show students how to navigate CRCNS site to choose their own

* Model-guided visualization
** the rate model of neural spiking
*** histograms
*** linear convolution
** basic 1D visualization
*** line and scatter plots
*** principles of good data visualization
** building composable workflows
*** version control
*** scripting

* Linear time-invariant systems
** time-domain signal processing
*** filtering, correlation
** Fourier transformation
*** time-frequency tradeoff
*** coherence
** basic 2D visualization
*** data: EEG, bioacoustic recordings, spikes
*** color maps
*** aligning plots for multiple time series

* Estimating parameters and comparing models
** generative and statistical models
** Bayesian statistics and posterior distributions
** goodness-of-fit statistics and predictive distributions
** test-driven development

* Receptive fields and other encoding models

* Decoding models and information theory
** ROC analysis
** introduction to information theory
** population codes

* Dynamical neuron models
** introduction to dynamical systems
** Hodgkin-Huxley model
** phenomenological neuron models

* Large-scale simulations
